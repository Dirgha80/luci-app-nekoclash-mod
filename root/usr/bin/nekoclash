#!/bin/sh

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

log_message() {
    local message="$1"
    local log_file='/var/log/neko_update.log'
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> "$log_file"
}

get_version_info() {
    local component="$1"
    local version_file
    local latest_version
    local current_version

    case $component in
        "neko")
            version_file='/etc/neko/version_neko.txt'
            repo_owner="Thaolga"
            repo_name="neko"
            releases_url="https://api.github.com/repos/$repo_owner/$repo_name/releases/latest"
            ;;
        "core")
            version_file='/etc/neko/version_mihomo.txt'
            releases_url="https://api.github.com/repos/MetaCubeX/mihomo/releases/latest"
            ;;
        "ui")
            version_file='/etc/neko/ui/metacubexd/version.txt'
            releases_url="https://api.github.com/repos/MetaCubeX/metacubexd/releases/latest"
            ;;
        "singbox")
            version_file='/etc/neko/version_singbox.txt'
            repo_owner="SagerNet"
            repo_name="sing-box"
            releases_url="https://api.github.com/repos/$repo_owner/$repo_name/releases/latest"
            ;;
        *)
            echo -e "${RED}未知组件: $component${NC}"
            return 1
    esac

    if [ -e "$version_file" ] && [ -s "$version_file" ]; then
        current_version=$(cat "$version_file")
    else
        current_version="未安装"
    fi

    echo -e "${CYAN}当前版本: $current_version${NC}"

    latest_version=$(curl -s "$releases_url" | grep '"tag_name":' | sed -E 's/.*"tag_name": "([^"]+)".*/\1/')

    if [ -z "$latest_version" ]; then
        echo -e "${RED}获取最新版本失败。请检查网络连接或 GitHub API 状态。${NC}"
        latest_version="获取失败"
    fi
}

install_ipk() {
    repo_owner="Thaolga"
    repo_name="luci-app-nekoclash"
    package_name="luci-app-nekoclash"
    releases_url="https://api.github.com/repos/$repo_owner/$repo_name/releases/latest"

    echo -e "${CYAN}更新 opkg 软件包列表...${NC}"
    opkg update

    response=$(wget -qO- "$releases_url")

    if [ -z "$response" ]; then
        log_message "无法访问 GitHub releases 页面。"
        echo -e "${RED}无法访问 GitHub releases 页面。${NC}"
        return 1
    fi

    echo "$response" > /tmp/releases_response.json

    new_version=$(echo "$response" | grep '"tag_name":' | sed -E 's/.*"tag_name": "([^"]+)".*/\1/')

    if [ -z "$new_version" ];then
        log_message "未找到最新版本。"
        echo -e "${RED}未找到最新版本。${NC}"
        return 1
    fi

    if [ -e "/etc/neko/lang.txt" ]; then
        language_choice=$(cat /etc/neko/lang.txt)
    else
        set_language
        language_choice=$(cat /etc/neko/lang.txt)
    fi

    download_url="https://github.com/$repo_owner/$repo_name/releases/download/$new_version/${package_name}_${new_version}-${language_choice}_all.ipk"

    echo -e "${CYAN}下载 URL: $download_url${NC}"
    log_message "开始下载 IPK 包..."

    local_file="/tmp/$package_name.ipk"

    curl -L -f -o "$local_file" "$download_url"

    if [ $? -eq 0 ]; then
        log_message "下载完成。"
        echo -e "${GREEN}下载完成。${NC}"
    else
        log_message "下载失败。"
        echo -e "${RED}下载失败。${NC}"
        return 1
    fi

    if [ ! -s "$local_file" ]; then
        log_message "下载的文件为空或不存在。"
        echo -e "${RED}下载的文件为空或不存在。${NC}"
        return 1
    fi

    opkg install --force-reinstall "$local_file"
    if [ $? -eq 0 ]; then
        log_message "NeKoClash安装完成。"
        echo -e "${GREEN}NeKoClash安装完成。${NC}"

        echo "$new_version" > /etc/neko/version_neko.txt

        get_version_info "neko"
    else
        log_message "NeKoClash安装失败。"
        echo -e "${RED}NeKoClash安装失败。${NC}"
        return 1
    fi

    rm -f "$local_file"
    log_message "已删除临时文件: $local_file"
}

current_script="$(basename "$0")"
replacement_script="/usr/bin/nekoclash"

if [ "$(id -u)" -ne 0 ]; then
    echo -e "${RED}必须以 root 用户身份运行此脚本。${NC}"
    exit 1
fi

if [ "$current_script" != "nekoclash" ]; then
    if [ -f "$replacement_script" ]; then
        echo "旧脚本已存在，正在替换..."
        rm "$replacement_script"
    fi
    echo "将当前脚本重命名为 'nekoclash' 并移动到 /usr/bin 目录..."
    cp "$0" "$replacement_script"
    chmod +x "$replacement_script"
    echo "操作完成。请重新输入 'nekoclash' 运行脚本。"
    exit 0
fi

install_core() {
    log_message "Fetching the latest core version..."
    latest_version=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')

    if [ -z "$latest_version" ]; then
        log_message "Unable to fetch the latest core version, update aborted."
        echo -e "${RED}Unable to fetch the latest core version, please check your network connection.${NC}"
        return 1
    fi

    current_version=''
    install_path='/etc/neko/core/mihomo'
    temp_file='/tmp/mihomo.gz'
    temp_extract_path='/tmp/mihomo_temp'

    if [ -e "$install_path/version.txt" ]; then
        current_version=$(cat "$install_path/version.txt" 2>/dev/null)
        log_message "Current version: $current_version"
    else
        log_message "Current version file not found, considering as not installed."
    fi

    case "$(uname -m)" in
        aarch64)
            download_url="https://github.com/MetaCubeX/mihomo/releases/download/$latest_version/mihomo-linux-arm64-$latest_version.gz"
            ;;
        armv7l)
            download_url="https://github.com/MetaCubeX/mihomo/releases/download/$latest_version/mihomo-linux-armv7l-$latest_version.gz"
            ;;
        x86_64)
            download_url="https://github.com/MetaCubeX/mihomo/releases/download/$latest_version/mihomo-linux-amd64-$latest_version.gz"
            ;;
        *)
            log_message "No suitable download link found for architecture: $(uname -m)"
            echo -e "${RED}No suitable download link found for architecture: $(uname -m)${NC}"
            return 1
            ;;
    esac

    echo -e "${CYAN}Latest version: $latest_version${NC}"
    echo -e "${CYAN}Download link: $download_url${NC}"

    if [ "$current_version" = "$latest_version" ]; then
        log_message "The current version is the latest, no update needed."
        echo -e "${GREEN}The current version is already the latest.${NC}"
        return 0
    fi

    log_message "Starting core update download..."
    wget -O "$temp_file" "$download_url"
    return_var=$?

    log_message "wget return value: $return_var"

    if [ $return_var -eq 0 ]; then
        mkdir -p "$temp_extract_path"
        log_message "Extract command: gunzip -f -c '$temp_file' > '$temp_extract_path/mihomo'"
        gunzip -f -c "$temp_file" > "$temp_extract_path/mihomo"
        return_var=$?

        log_message "Extract return value: $return_var"

        if [ $return_var -eq 0 ]; then
            mv "$temp_extract_path/mihomo" "$install_path"
            chmod 0755 "$install_path"
            return_var=$?
            log_message "Set permissions command: chmod 0755 '$install_path'"
            log_message "Set permissions return value: $return_var"

            if [ $return_var -eq 0 ]; then
                echo "$latest_version" > "/etc/neko/version_mihomo.txt"
                log_message "Core update complete! Current version: $latest_version"
                echo -e "${GREEN}Core update complete! Current version: $latest_version${NC}"
            else
                log_message "Failed to set permissions!"
                echo -e "${RED}Failed to set permissions!${NC}"
                return 1
            fi
        else
            log_message "Extraction failed, return value: $return_var"
            echo -e "${RED}Extraction failed!${NC}"
            return 1
        fi
    else
        log_message "Download failed, return value: $return_var"
        echo -e "${RED}Download failed!${NC}"
        return 1
    fi

    rm -f "$temp_file"
    rm -rf "$temp_extract_path"
}

install_singbox() {
    GREEN='\033[0;32m'
    NC='\033[0m' 

    log_message() {
        local message=$1
        local log_file='/var/log/singbox_update.log'
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "[$timestamp] $message" >> "$log_file"
    }

    local install_path='/usr/bin/sing-box'
    local temp_dir='/tmp/singbox_temp'
    local temp_file='/tmp/sing-box.tar.gz'
    local latest_version='1.10.0-beta.5'

    local current_arch=$(uname -m)
    local download_url

    case "$current_arch" in
        aarch64)
            download_url="https://github.com/SagerNet/sing-box/releases/download/v$latest_version/sing-box-$latest_version-linux-arm64.tar.gz"
            ;;
        x86_64)
            download_url="https://github.com/SagerNet/sing-box/releases/download/v$latest_version/sing-box-$latest_version-linux-amd64.tar.gz"
            ;;
        *)
            log_message "No suitable download link found for architecture: $current_arch"
            echo "No suitable download link found for architecture: $current_arch"
            exit 1
            ;;
    esac

    log_message "Current architecture: $current_arch"
    log_message "Download link: $download_url"

    log_message "Starting core update download..."
    wget -O "$temp_file" "$download_url"
    local return_var=$?

    log_message "wget return value: $return_var"

    if [ $return_var -eq 0 ]; then
        mkdir -p "$temp_dir"
        log_message "Extraction command: tar -xzf '$temp_file' -C '$temp_dir'"
        tar -xzf "$temp_file" -C "$temp_dir"
        return_var=$?

        log_message "Extraction return value: $return_var"
        log_message "List of extracted files:"
        ls -lR "$temp_dir"

        if [ $return_var -eq 0 ]; then
            if [ "$current_arch" = "x86_64" ]; then
                extracted_file="$temp_dir/sing-box-$latest_version-linux-amd64/sing-box"
            elif [ "$current_arch" = "aarch64" ]; then
                extracted_file="$temp_dir/sing-box-$latest_version-linux-arm64/sing-box"
            fi

            if [ -e "$extracted_file" ]; then
                log_message "Move file command: mv '$extracted_file' '$install_path'"
                mv "$extracted_file" "$install_path"
                chmod 0755 "$install_path"
                return_var=$?
                log_message "Set permissions command: chmod 0755 '$install_path'"
                log_message "Set permissions return value: $return_var"

                if [ $return_var -eq 0 ]; then
                    log_message "Update/installation complete! Version: ${GREEN}$latest_version${NC}"
                    echo -e "Update/installation complete! Version: ${GREEN}$latest_version${NC}"
                else
                    log_message "Failed to set permissions!"
                    echo "Failed to set permissions!"
                fi
            else
                log_message "The extracted file 'sing-box' does not exist."
                echo "The extracted file 'sing-box' does not exist."
            fi
        else
            log_message "Extraction failed, return value: $return_var"
            echo "Extraction failed!"
        fi
    else
        log_message "Download failed, return value: $return_var"
        echo "Download failed!"
    fi

    if [ -e "$temp_file" ];then
        rm "$temp_file"
        log_message "Cleaning up temporary file: $temp_file"
    fi
    if [ -d "$temp_dir" ];then
        rm -r "$temp_dir"
        log_message "Cleaning up temporary extraction directory: $temp_dir"
    fi
}


install_ui() {
    log_message "Fetching the latest UI version..."
    latest_version=$(curl -s https://api.github.com/repos/MetaCubeX/metacubexd/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')

    if [ -z "$latest_version" ]; then
        log_message "Unable to fetch the latest UI version, update aborted."
        echo -e "${RED}Unable to fetch the latest UI version, please check your network connection.${NC}"
        return 1
    fi

    current_version=''
    install_path='/etc/neko/ui/metacubexd'
    temp_file='/tmp/metacubexd.tgz'
    temp_extract_path='/tmp/metacubexd_temp'

    if [ -e "$install_path/version.txt" ]; then
        current_version=$(cat "$install_path/version.txt" 2>/dev/null)
        log_message "Current version: $current_version"
    else
        log_message "Current version file not found, considering as not installed."
    fi

    download_url="https://github.com/MetaCubeX/metacubexd/releases/download/$latest_version/compressed-dist.tgz"

    echo -e "${CYAN}Latest version: $latest_version${NC}"
    echo -e "${CYAN}Download link: $download_url${NC}"

    if [ "$current_version" = "$latest_version" ]; then
        log_message "The current version is the latest version, no update needed."
        echo -e "${GREEN}The current version is already the latest.${NC}"
        return 0
    fi

    log_message "Starting to download the UI update..."
    wget -O "$temp_file" "$download_url"
    return_var=$?

    log_message "wget return value: $return_var"

    if [ $return_var -eq 0 ]; then
        mkdir -p "$temp_extract_path"
        log_message "Extract command: tar -xzf '$temp_file' -C '$temp_extract_path'"
        tar -xzf "$temp_file" -C "$temp_extract_path"
        return_var=$?

        log_message "Extract return value: $return_var"

        if [ $return_var -eq 0 ]; then
            mkdir -p "$install_path"
            cp -r "$temp_extract_path/"* "$install_path/"
            return_var=$?
            log_message "Copy files return value: $return_var"

            if [ $return_var -eq 0 ]; then
                echo "$latest_version" > "$install_path/version.txt"
                log_message "UI update complete! Current version: $latest_version"
                echo -e "${GREEN}UI update complete! Current version: $latest_version${NC}"
            else
                log_message "Failed to copy files!"
                echo -e "${RED}Failed to copy files!${NC}"
                return 1
            fi
        else
            log_message "Extraction failed, return value: $return_var"
            echo -e "${RED}Extraction failed!${NC}"
            return 1
        fi
    else
        log_message "Download failed, return value: $return_var"
        echo -e "${RED}Download failed!${NC}"
        return 1
    fi

    if [ -e "$temp_file" ]; then
        rm "$temp_file"
        log_message "Cleaning up temp file: $temp_file"
    fi

    if [ -e "$temp_extract_path" ]; then
        rm -rf "$temp_extract_path"
        log_message "Cleaning up temp directory: $temp_extract_path"
    fi

    log_message "Operation completed, returning to the main menu..."
}

install_php() {
    GREEN="\033[32m"
    RED="\033[31m"
    YELLOW="\033[33m"
    RESET="\033[0m"

    ARCH=$(uname -m)

    if [ "$ARCH" == "aarch64" ]; then
        PHP_CGI_URL="https://github.com/Thaolga/neko/releases/download/core_neko/php8-cgi_8.3.10-1_aarch64_generic.ipk"
        PHP_URL="https://github.com/Thaolga/neko/releases/download/core_neko/php8_8.3.10-1_aarch64_generic.ipk"
        PHP_MOD_CURL_URL="https://github.com/Thaolga/neko/releases/download/core_neko/php8-mod-curl_8.3.10-1_aarch64_generic.ipk"
    elif [ "$ARCH" == "x86_64" ]; then
        PHP_CGI_URL="https://github.com/Thaolga/neko/releases/download/core_neko/php8-cgi_8.3.10-1_x86_64.ipk"
        PHP_URL="https://github.com/Thaolga/neko/releases/download/core_neko/php8_8.3.10-1_x86_64.ipk"
        PHP_MOD_CURL_URL="https://github.com/Thaolga/neko/releases/download/core_neko/php8-mod-curl_8.3.10-1_x86_64.ipk"
    else
        echo -e "${RED}Unsupported architecture: $ARCH${RESET}"
        exit 1
    fi

    echo -e "${GREEN}Downloading and installing PHP CGI...${RESET}"
    wget "$PHP_CGI_URL" -O /tmp/php8-cgi.ipk
    if opkg install --force-reinstall --force-overwrite /tmp/php8-cgi.ipk; then
        echo -e "${GREEN}PHP CGI installed successfully.${RESET}"
    else
        echo -e "${RED}PHP CGI installation failed.${RESET}"
    fi

    echo -e "${GREEN}Downloading and installing PHP...${RESET}"
    wget "$PHP_URL" -O /tmp/php8.ipk
    if opkg install --force-reinstall --force-overwrite /tmp/php8.ipk; then
        echo -e "${GREEN}PHP installed successfully.${RESET}"
    else
        echo -e "${RED}PHP installation failed.${RESET}"
    fi

    echo -e "${GREEN}Downloading and installing PHP curl module...${RESET}"
    wget "$PHP_MOD_CURL_URL" -O /tmp/php8-mod-curl.ipk
    if opkg install --force-reinstall --force-overwrite /tmp/php8-mod-curl.ipk; then
        echo -e "${GREEN}PHP curl module installed successfully.${RESET}"
    else
        echo -e "${RED}PHP curl module installation failed.${RESET}"
    fi

    rm -f /tmp/php8-cgi.ipk /tmp/php8.ipk /tmp/php8-mod-curl.ipk

    echo -e "${GREEN}Installation completed.${RESET}"
    echo -e "${YELLOW}Please reboot the server to apply the changes.${RESET}"
}

reboot_router() {
    echo -e "${CYAN}Rebooting the router...${NC}"
    reboot
}

while true; do
    echo -e "${YELLOW}===================================${NC}"
    echo -e "${YELLOW}|   1. Install NeKoClash (Chinese) |${NC}"
    echo -e "${YELLOW}|   2. Install NeKoClash (English) |${NC}"
    echo -e "${YELLOW}|   3. Install Mihomo Core         |${NC}"
    echo -e "${YELLOW}|   4. Install Sing-box Core       |${NC}"
    echo -e "${YELLOW}|   5. Install UI Control Panel    |${NC}"
    echo -e "${YELLOW}|   6. Install PHP8 and PHP8-CGI   |${NC}"
    echo -e "${YELLOW}|   7. Reboot Router               |${NC}"
    echo -e "${YELLOW}|   0. Exit                        |${NC}"
    echo -e "${YELLOW}===================================${NC}"

    read -p "Please enter an option and press Enter: " choice

    case $choice in
        1)
            echo "cn" > /etc/neko/lang.txt
            install_ipk
            ;;
        2)
            echo "en" > /etc/neko/lang.txt
            install_ipk
            ;;
        3)
            install_core
            ;;
        4)
            install_singbox
            ;;
        5)
            install_ui
            ;;
        6)
            install_php
            ;;
        7)
            reboot_router
            ;;
        0)
            echo -e "${GREEN}Exiting the program.${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid option, please try again.${NC}"
            ;;
    esac
done
